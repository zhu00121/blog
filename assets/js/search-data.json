{
  
    
        "post0": {
            "title": "Why CE?",
            "content": "I remember when I first saw the phrase &#39;cross-entropy (or CE for short)&#39;, I had no idea what it meant. But it seemed to exist in almost every ML/DL paper, where people use it as the loss function of their model. After reading some articles explaining this loss function, I still found it not straightforward enough (considering I&#39;m not a Math/CS student), so I decided to write something about it and try to explain it from a more intuitive perspective. . What is CE? . To make it simple, it&#39;s just one of the many loss functions (but the most popular one), with which we use to update the parameters of our model. Notice that loss is different from error rate. Error rate directly answers the question &quot;How many mistakes did the model make (in percentage)?&quot;. While loss function could be considered as something to approximate error rate, but is used to update parameters (machine uses this loss function to &#39;learn&#39; by itself). . Where does CE fit in the DL pipeline? . Before I show an example of calculating CE, I would like to show you where this CE sits in our model and what it does in general. . . The CE function sits right after Softmax function (which is used to calculate the probabilities of this sample for being each of the classes in a classification problem). It has two inputs: outputs from Softmax function and the one-hot encodings of the targets. . Details of CE . As mentioned above, CE is probably the most popular loss function that is used in a classification problem.Thus, looking into the details of CE would help us understand a lot of models proposed by other people and make modifications if needed. . Here goes an example. . Suppose we need to classify an image into one of the three classes (e.g. cat/dog/human). After we feed this image into our inner layers of the model and the Softmax function, it gives us an output [0.8, 0.1, 0.1], where the three numbers respectively represent the probability of this image being a cat/dog/human. Now we know that the actual label (I.e. target) is [1,0,0] (in a 1-hot-encoded way), the question now would be “How do we figure out a way to quantify the difference between predictions and targets?” . . A simple way to do is calculate the dot product of these two vectors. The idea of multiplying these two vectors would give us a results that represents how similar they are. Since: 0.81=1, 0.10=0, 0.1*0=0, the dot product is now [1,0,0]. So we have a way to measure their similarity, but how do we measure the difference? To use Cross-entropy! . . Pi is the output of the Softmax function and Ti is the target. What CE does is that it multiplies the log of each number in the prediction with target and add them all up. Since the log usually makes it negative, we have a ‘-’ at front to make the number positive. Additionally, we could take the average of this CE(P,T) so that even when we have a large number of data points (I.e. when i is large), we still end up having a small number of cross-entropy. .",
            "url": "https://zhu00121.github.io/blog/2021/02/02/Minute-Review-of-Cross-entropy.html",
            "relUrl": "/2021/02/02/Minute-Review-of-Cross-entropy.html",
            "date": " • Feb 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Access data and construct a datablock with fastai",
            "content": "df = pd.read_csv(&#39;filepath&#39;) df.head() . . To access the fname only, we could use DataFrame.iloc or df[&#39;fname&#39;] . df.iloc[:,0] df[&#39;fname&#39;] . . Now for classification problems, we always want our data labelled and have it divided into training and validation set. The Datablock object of Fastai can do this automatically for us. . The Datablock is a generic container to quickly build Datasets and DataLoaders: . dblock = Datablock() dblock? . . We could then build a datasets object with a source. With .train and .valid, it randomly splits the whole dataset into training set with 80% of data and validation set with 20% of data. . dsets = dblock.datasets(df) len(dsets.train),len(dsets.valid) #number of training and validation sets x, y = dsets[0] x,y . . What if we want the labels to be split up? . def get_x(r): return r[&#39;fname&#39;] def get_y(r): return r[&#39;labels&#39;].split(&#39;&#39;) dblock = Datablock(blocks = (ImageBlock,MultiCategoryBlcok) ,get_x = get_x,get_y = get_y) #To have it opened as image with multilabel dsets = dblock.datasets(df) dsets.train[0] . . Now we can put our datasetsinto dataloaders. What dataloadesrsdoes is basically collating the items from datasetsinto a mini batch. While we are doing so, we need to also make sure that the images are of the same size. . dblock = Datablock.(blocks(ImageBlock,MultiCategoryBlcok), get_x = get_x,get_y = get_y, item_tfms = RandomResizedCrop(128,min_scale = 0.35)) dls = dblock.Dataloaders(df) . Display a few: . dls.show_batch(nrows=3, ncols=3) . .",
            "url": "https://zhu00121.github.io/blog/2021/02/02/Datablock-with-fastai.html",
            "relUrl": "/2021/02/02/Datablock-with-fastai.html",
            "date": " • Feb 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Why we need SGD?",
            "content": "Supposing that we have some kind of data that we would like to use to classify, or to predict (which could be images, sound, kinematic data, or some other kind of time-series data), so what are the approaches that we could use? . The first thing comes to my mind is to compare my data to the baseline (a known pattern),and see how similar they are. Then I would need a measurement to quantify the similarity/difference. We could use MSE (mean squared error), which tells us the distance between two patterns. Or we could simply use correlation to analyze the similarity between two sequences. . However, the problem is that with an algorithm like this, the performance of the algorithm won&#39;t get better since there is no updating. What we want is to have a model of which the performance is getting better as it takes in more data. But how can we integrate this &#39;update&#39; concept into our model? Well, the answer is to use stochastic gradient descent - SGD. . What does SGD do? . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . |████████████████████████████████| 727kB 12.8MB/s |████████████████████████████████| 51kB 5.1MB/s |████████████████████████████████| 194kB 30.7MB/s |████████████████████████████████| 1.2MB 25.7MB/s |████████████████████████████████| 61kB 6.3MB/s Mounted at /content/gdrive . from fastai.vision.all import * from fastbook import * . gv(&#39;&#39;&#39; init-&gt;predict-&gt;loss-&gt;gradient-&gt;step-&gt;stop step-&gt;predict[label=repeat] &#39;&#39;&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G init init predict predict init&#45;&gt;predict loss loss predict&#45;&gt;loss gradient gradient loss&#45;&gt;gradient step step gradient&#45;&gt;step step&#45;&gt;predict repeat stop stop step&#45;&gt;stop What is does is it updates the parameters of my model every time it takes in new data ponits. And it keeps doing this until we tell it to stop. . Suppose that this the pattern we would like our model to predict (I&#39;m making up some random functions) . x = torch.arange(-10,10).float() . y = 3*x**3 + 0.5*(x-5)**2 + 5*x plt.scatter(x,y) . &lt;matplotlib.collections.PathCollection at 0x7f12a42db2b0&gt; . Then here goes my model . def f(xt,para): a,b,c,d = para return a*xt**3 + b*xt**2 + c*xt + d . Step1:initialize my parameter . para = torch.randn(4).requires_grad_() para . tensor([0.4617, 0.2674, 0.5349, 0.8094], requires_grad=True) . by using requiresgrad(). I&#39;m telling pytorch that these are the parameters to be updated. (If you use tensorflow, this would be something to notice) . Step2:Try predicting . yp = f(x,para) . def show_preds(preds, ax=None): if ax is None: ax=plt.subplots()[1] ax.scatter(x, y) ax.scatter(x, to_np(yp), color=&#39;red&#39;) ax.set_ylim(-3000,3000) . show_preds(yp) . It seems that this model does not align with my target at all. So we&#39;ll need to update our parameters step by step. . Step3:Calculate loss . def mse(preds,targets): return ((preds-targets)**2).mean().sqrt() . loss = mse(yp,y) loss . tensor(968.8273, grad_fn=&lt;SqrtBackward&gt;) . Quite huge difference! . Step4:Calculate gradient . loss.backward() . para.grad . tensor([-3.8442e+02, 1.2180e+01, -5.2907e+00, 1.1061e-01]) . .backward() means we are using back propagation. If not familiar with it, just think it as a way to update our parameters. . Step5:Update gradient . lr = 1e-3 . para.data -= lr*para.grad.data para . AttributeError Traceback (most recent call last) &lt;ipython-input-77-9fc14b2f8de1&gt; in &lt;module&gt;() -&gt; 1 para.data -= lr*para.grad.data 2 para AttributeError: &#39;NoneType&#39; object has no attribute &#39;data&#39; . yp = f(x,para) show_preds(yp) . This seems better than the initial one we had. . Step6:Repeat updating parameters for several times . def apply_SGD(para,prn=True): yp = f(x,para) loss = mse(yp,y) loss.backward() para.data -= lr*para.grad.data para.grad=None if prn: print(loss.item()) return loss . for i in range(0,20):apply_SGD(para) . 74.14805603027344 652.5556640625 88.65564727783203 644.0829467773438 96.90361785888672 638.051025390625 102.796630859375 633.3668212890625 107.3859634399414 629.5402221679688 111.1433334350586 626.304443359375 114.32713317871094 623.49609375 117.09529113769531 621.0087280273438 119.55108642578125 618.7686767578125 121.76596069335938 616.7232666015625 . _,axs = plt.subplots(1,4,figsize=(12,3)) for ax in axs: show_preds(apply_SGD(para), ax) plt.tight_layout() . 123.79088592529297 614.8341674804688 125.66326904296875 613.0724487304688 . This seems like the target we are trying to predict! .",
            "url": "https://zhu00121.github.io/blog/2021/01/15/Blog1SGD.html",
            "relUrl": "/2021/01/15/Blog1SGD.html",
            "date": " • Jan 15, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://zhu00121.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://zhu00121.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zhu00121.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zhu00121.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}